#!/bin/bash
#######################################
## Vim plugin management using Git submodules
## Author:  Ryan D. Najac
## License: GNU General Public License v3.0
## Usage: vimfect <repository-url> [repository-url...]
## Description: This script manages Vim plugins using Git submodules.
##              It adds the specified repositories as submodules in the
##              same directory as the script. The script then commits the
##              changes to the repository. The script also syncs and
##              updates the submodules.
#######################################

# Enforce strict error checking
set -euo pipefail

# Uncomment to enable debugging
# set -x

# Usage message
USAGE="Usage: ${0} <repository-url> [repository-url...]"

#######################################
# Resolve the full repository URL.
# Globals: None
# Arguments: $1 - Repository name or URL
# Outputs: Writes full repository URL to stdout
# Returns: 0 on success
#######################################
resolve_repo_url() {
  local repo="$1"
  if [[ "$repo" =~ ^(https://|http://|git://|git@|ssh://git@) ]]; then
    printf '%s\n' "$repo"
  else
    printf 'https://github.com/%s.git\n' "$repo"
  fi
}

#######################################
# Manage Vim plugins using Git submodules.
# Globals: SCRIPT_DIR
# Arguments: $@ - Repository URLs
# Outputs: stdout, stderr
# Returns: 0 on success
#######################################
vimfect() {
  for repo in "$@"; do
    local resolved_repo
    resolved_repo=$(resolve_repo_url "$repo")
    local repo_name
    repo_name=$(basename "$repo" .git)
    git submodule add --force "$resolved_repo" "$repo_name"
    git commit -m "vimfect: Add submodule $resolved_repo"
  done
  git submodule sync
  git submodule update --init --recursive
}

#######################################
# Main function
# Globals: None
# Arguments: $@ - Repository URLs
# Outputs: stdout, stderr
# Returns: 0 on success
#######################################
main() {
  [[ $# -lt 1 ]] && { printf '%s\n' "$USAGE" >&2; exit 1; }

  # Ensure the .gitmodules file exists and init if not
  local DOTGITMODULES
  DOTGITMODULES=$(git rev-parse --show-toplevel)/.gitmodules
  [[ ! -f "$DOTGITMODULES" ]] && git submodule init

  vimfect "$@"
}

# Call the main function with all the script arguments
main "$@"

